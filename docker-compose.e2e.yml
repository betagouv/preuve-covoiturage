version: '3.5'
services:
  proxy:
    image: traefik:v2.5
    container_name: traefik
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    command:
      - '--log.level=DEBUG'
      - '--api.insecure=true'
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
      - '--providers.file.directory=/etc/traefik/dynamic'
      - '--entrypoints.websecure.address=:443'
      - '--entrypoints.web.address=:80'
      - '--providers.docker.network=pdce2e_back'
      - '--entrypoints.web.http.redirections.entryPoint.to=websecure'
      - '--entrypoints.web.http.redirections.entryPoint.scheme=https'
      - '--entrypoints.web.http.redirections.entryPoint.permanent=true'
    volumes:
      - ${PWD}/docker/traefik/config.yml:/etc/traefik/dynamic/config.yml
      - ${PWD}/docker/traefik/certs:/etc/certs
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
    networks:
      back:
      front:
        aliases:
          - api.covoiturage.test
          - app.covoiturage.test
          - mailer.covoiturage.test
          - s3.covoiturage.test
          - download.covoiturage.test
          - local-pdc-export.s3.covoiturage.test

  postgres:
    build: ./docker/postgres
    networks:
      - back
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_DB: 'test'

  redis:
    build: './docker/redis'
    networks:
      - back

  wait:
    image: busybox:1.33
    environment:
      DOMAIN: api
      PORT: 8080
    networks:
      - back
    command: ['/bin/sh', '-c', 'until nc -zv $$DOMAIN $$PORT -w1; do echo "waiting for app"; sleep 1; done']

  mailer:
    image: mailhog/mailhog:v1.0.1
    environment:
      MH_CORS_ORIGIN: '*'
    networks:
      - back
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.mailer.rule=Host(`mailer.covoiturage.test`)'
      - 'traefik.http.routers.mailer.entrypoints=websecure'
      - 'traefik.http.routers.mailer.tls=true'
      - 'traefik.http.services.mailer.loadbalancer.server.port=8025'

  dashboard:
    volumes:
      - ${PWD}/docker/dashboard/ci.env.js:/usr/share/nginx/html/assets/env.js:ro
    build:
      dockerfile: ./docker/dashboard/prod/Dockerfile
      context: .
    networks:
      - back
    depends_on:
      - api
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.dashboard.rule=Host(`app.covoiturage.test`)'
      - 'traefik.http.routers.dashboard.entrypoints=websecure'
      - 'traefik.http.routers.dashboard.tls=true'
      - 'traefik.http.services.dashboard.loadbalancer.server.port=8080'

  api:
    build:
      dockerfile: ./docker/api/prod/Dockerfile
      context: .
    environment:
      LOG_LEVEL: 'debug'
      APP_APP_URL: https://app.covoiturage.test
      APP_JWT_SECRET: thisIsASecret0000
      APP_SESSION_SECRET: thisIsAlsoASecret0000
      AWS_S3_PATH_STYLE: 'true'
      AWS_BUCKET_PREFIX: local-pdc
      AWS_ENDPOINT: http://minioadmin:minioadmin@s3:9000
      AWS_REGION: fr-par
      AWS_ACCESS_KEY_ID: minioadmin 
      AWS_SECRET_ACCESS_KEY: minioadmin
      APP_POSTGRES_URL: postgres://postgres:postgres@postgres:5432/test
      APP_REDIS_URL: redis://redis:6379/1
      APP_MAIL_SMTP_URL: smtp://mailer:1025
      APP_RATE_LIMIT_MAX_FACTOR: '0'
      APP_DATAGOUV_URL: http://data-gouv-url
      APP_DATAGOUV_KEY: thisIsASecret
      PORT: 8080
      NODE_ENV: local
      APP_ENV: local
      APP_INSEE_API_KEY: ${APP_INSEE_API_KEY}
    networks:
      - back
      - front
    depends_on:
      - redis
      - postgres
      - mailer
      - s3
      - worker
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.api.rule=Host(`api.covoiturage.test`)'
      - 'traefik.http.routers.api.entrypoints=websecure'
      - 'traefik.http.routers.api.tls=true'
      - 'traefik.http.services.api.loadbalancer.server.port=8080'

  worker:
    build:
      dockerfile: ./docker/api/prod/Dockerfile
      context: .
    environment:
      DEBUG: '*'
      APP_WORKER: 'true'
      APP_APP_URL: https://app.covoiturage.test
      APP_JWT_SECRET: thisIsASecret0000
      APP_SESSION_SECRET: thisIsAlsoASecret0000
      AWS_S3_PATH_STYLE: 'true'
      AWS_BUCKET_PREFIX: local-pdc
      AWS_ENDPOINT: http://minioadmin:minioadmin@s3:9000
      AWS_REGION: fr-par
      AWS_ACCESS_KEY_ID: minioadmin 
      AWS_SECRET_ACCESS_KEY: minioadmin
      APP_POSTGRES_URL: postgres://postgres:postgres@postgres:5432/test
      APP_REDIS_URL: redis://redis:6379/1
      APP_MAIL_SMTP_URL: smtp://mailer:1025
      APP_MAIL_VERIFY_SMTP: 'true'
      APP_RATE_LIMIT_MAX_FACTOR: '0'
      APP_DATAGOUV_URL: http://data-gouv-url
      APP_DATAGOUV_KEY: thisIsASecret
      APP_INSEE_API_KEY: ${APP_INSEE_API_KEY}
      PORT: 8080
      NODE_ENV: local
      APP_ENV: local
    networks:
      - back
      - front
    depends_on:
      - redis
      - postgres
      - mailer
      - s3
    command: ['yarn', 'start:queue']

  s3:
    image: minio/minio:edge
    networks:
      - back
    command: 'server /data'
    environment:
      MINIO_DOMAIN: s3.covoiturage.test
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.s3.rule=Host(`s3.covoiturage.test`, `local-pdc-export.s3.covoiturage.test`, `download.covoiturage.test`)'
      - 'traefik.http.routers.s3.entrypoints=websecure'
      - 'traefik.http.routers.s3.tls=true'
      - 'traefik.http.services.s3.loadbalancer.server.port=9000'

  s3-init:
    image: minio/mc:edge
    networks:
      - back
    environment:
      MINIO_URL: http://s3:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_REGION_NAME: fr-par
    entrypoint:
      ['sh', '-c', 'mc alias set minio $$MINIO_URL $$MINIO_ACCESS_KEY $$MINIO_SECRET_KEY && mc mb minio/$$BUCKET']
    depends_on:
      - s3

  cypress:
    build:
      dockerfile: ../docker/cypress/Dockerfile
      context: ./tests
    volumes:
      - /tmp/cypress/videos:/app/cypress/videos
      - /tmp/cypress/screenshots:/app/cypress/screenshots
    environment:
      CYPRESS_baseUrl: https://app.covoiturage.test
      CYPRESS_MAILHOG_URL: https://mailer.covoiturage.test/api
    depends_on:
      - api
    networks:
      - front

  lint:
    build: './docker/lint'
    tty: true
    volumes:
      - ${PWD}/api:/code/api:ro
      - ${PWD}/dashboard:/code/dashboard:ro

networks:
  front:
  back:
