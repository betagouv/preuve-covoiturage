set dotenv-load

cert_dir:=join(parent_directory(justfile_directory()),"docker","traefik","certs")
key_dir:=join(parent_directory(justfile_directory()),"docker","api","certs")
docker_compose_dev_file:=join(parent_directory(justfile_directory()),"docker-compose.dev.yml")
docker_compose_e2e_file:=join(parent_directory(justfile_directory()),"docker-compose.e2e.yml")

default:
  @just --list

# Run test:integration
test-integration:
  just test '**/*.integration.spec.ts'

# Run test:unit
test-unit:
  just test --parallel '**/*.unit.spec.ts'

# Run test
test *pattern:
  deno test -A --no-check --trace-leaks --unsafely-ignore-certificate-errors {{ pattern }}

# Start docker services (detached)
start *services="s3 postgres redis mailer":
 just dc up -d {{ services }}

# Start docker services for e2e
[private]
start_e2e *services="s3 postgres redis mailer":
 just dc_e2e up -d {{ services }}

# Stop docker services
stop keep_volume="true":
  just dc down {{ if keep_volume == "true" { "" } else { "-v" } }}

# Stop docker services for e2e
[private]
stop_e2e:
  just dc_e2e down -v

# Run docker compose dev
[private]
@dc *args:
  docker compose -f {{ docker_compose_e2e_file }} -f {{ docker_compose_dev_file }} {{ args }}

# Run docker compose e2e
[private]
@dc_e2e *args:
  docker compose -f {{ docker_compose_e2e_file }} {{ args }}

# Generate keys
[private]
generate_keys skip=path_exists(join(key_dir,"privateKey.pem")):
  #!/usr/bin/env bash
  echo "Generating keys"
  if {{ skip }}; then
    echo "Already exists"
  else
    openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:4096 -pkeyopt rsa_keygen_pubexp:3 -out "{{key_dir}}/privateKey.pem"
    openssl pkey -in "{{key_dir}}/privateKey.pem" -out "{{key_dir}}/publicKey.pem" -pubout
    chmod a+r "{{key_dir}}/privateKey.pem"
    chmod a+r "{{key_dir}}/publicKey.pem"
  fi 

# Generate cert
[private]
generate_certs skip=path_exists(join(cert_dir,"cert.key")):
  #!/usr/bin/env bash
  echo "Generating certs"
  if {{ skip }}; then
    echo "Already exists"
  else
    openssl genrsa -out {{ cert_dir }}/localCA.key 2048
    openssl req -x509 -new -nodes -key {{ cert_dir }}/localCA.key -sha256 -days 1825 -out {{ cert_dir }}/localCA.pem -subj "/C=FR/ST=Idf/L=Paris/O=Local PDC/CN=pdc/emailAddress=technique@covoiturage.beta.gouv.fr"
    openssl genrsa -out {{ cert_dir }}/cert.key 2048
    openssl req -new -key {{ cert_dir }}/cert.key -out {{ cert_dir }}/cert.csr -subj "/C=FR/ST=Idf/L=Paris/O=Local PDC/CN=*.covoiturage.test/emailAddress=technique@covoiturage.beta.gouv.fr"
    openssl x509 -req -in {{ cert_dir }}/cert.csr -CA {{ cert_dir }}/localCA.pem -CAkey {{ cert_dir }}/localCA.key -CAcreateserial -out {{ cert_dir }}/cert.crt -days 500 -sha256
  fi

# Run migrations
migrate:
  deno run \
    --allow-net \
    --allow-env \
    --allow-read \
    --allow-write \
    --allow-sys \
    --allow-ffi \
    src/db/main.ts

# Seed data
seed:
  just api seed

# Create a new bucket
[private]
create_bucket name:
  just dc run --rm -e BUCKET={{name}} s3-init

# Wait for app
[private]
wait domain port:
  until nc -zv {{ domain }} {{ port }} -w1; do echo "waiting"; sleep 1; done
  sleep 10

# CI integration test
ci_test_integration: generate_certs generate_keys (start_e2e "proxy") start_e2e (wait "localhost" "5432") seed (create_bucket "local-pdc-export") (create_bucket "local-pdc-appels-de-fonds") (create_bucket "local-pdc-public") (test-integration) stop_e2e

# CI unit test
ci_test_unit: (test-unit) 

# compatibility with previous justfile using npm
# TODO remove when fully migrated to Deno
alias ilos := api

# Run api command
api *command:
  deno run \
  --allow-net \
  --allow-env \
  --allow-read \
  --allow-write \
  --allow-ffi \
  --allow-sys \
  --allow-run \
  --unstable-fs \
  src/main.ts {{ command }}

# Start the HTTP API server on port 8080
@serve:
  if [[ "${IS_WORKER:-}" != "true" ]]; then just api http \$PORT; else just api queue \$APP_REDIS_URL; fi

# List all the APP_ environment variables
env:
  env | grep APP_ | sort | column -t -s=

# refresh the deno.lock file
lock:
  deno cache --lock=deno.lock --lock-write src/deps.ts src/dev_deps.ts

# Eval and run a file
eval *filepath:
  deno eval \
    --allow-net \
    --allow-env \
    # --allow-read \
    # --allow-write \
    # --allow-ffi \
    # --allow-sys \
    # --allow-run \
    # --unstable-fs \
    {{ filepath }}

# drop remaining test databases
drop_test_databases:
  pgcli -l; \
  echo "Are you sure you want to drop all databases starting with 'test_'? (y/n)"; \
  read -r response; \
  if [[ $response =~ ^([yY][eE][sS]|[yY])+$ ]]; then \
    pgcli -l | rg test_ | awk '{ print $2 }' | while read db; do psql -c "DROP DATABASE ${db};"; done; \
  else \
    echo "No database dropped"; \
  fi
